import yaml
from network.net_msg import NetMsg
# import sys
# import time

# from core.real_time_core import RealTimeCore
# from configurator.domotica_configurator import DomoticaConfigurator
# from configurator.configurator_exception import ConfiguratorException

# from channel.bus import Bus
# from channel.digital import Digital

# from core.event.timer_event import TimerEvent
# from core.event.boolean_event import BooleanEvent
# from core.event.composite_event import CompositeEvent

# from core.action.setter_action import SetterAction

# from string import Template 

# from datetime import timedelta
from core.control_core_exception import ControlCoreException

class ControlCore:

    control = None

    def get_instance():
        if ControlCore.control == None:
            ControlCore.control = ControlCore()
        return ControlCore.control
    get_instance=staticmethod(get_instance)

    def initialize(self,domotica):
        self.core = domotica
    
    def get_exported_methods(self):
        #{'method_name':'num_params'}
        exported_methods = {'shutdown':0,
                            'get_in_ports':0,
                            'get_out_ports':0,
                            'get_analog_ports':0,
                            'map_light':1,
                            'del_map_light':1}
        return exported_methods
    
    def shutdown(self,net_msg):
        self.core.network.shutdown()
        
    def get_in_ports(self,net_msg):
        pass

    def get_out_ports(self,net_msg):
        pass
    
    def get_analog_ports(self,net_msg):
        pass

    def map_light(self,net_msg):
        if len(net_msg.params) <> 1:
            raise ControlCoreException(
                """Error: Cantidad de parametros 
invalidos en %s(%d) se esperaban %d""" % (net_msg.method,len(net_msg.params),1))
        
        else:
            param = net_msg.params[0]
            if param.__class__.__name__ <> 'LightMap':
                raise ControlCoreException(
                    """Error: Parametro invalido(%s) se esperaba %s""" % 
                    (param.__class__.__name__,'LightMap'))        
        return NetMsg()
#         boolean = BooleanEvent(None,'Bus_0_I_02_01')
#         boolean_2 = BooleanEvent(None,'Bus_0_O_02_01',reverse=True)
#         comp = CompositeEvent(None,'%d and %d',[boolean,boolean_2],None,False)
#         comp.name = 'Se detecto movimiento'     
        
#         comp.pause_delta = timedelta(seconds=5)        
#         comp.paused_mode = True
        
#         #prendo este led    
#         action = SetterAction(None,['Bus_0_O_02_01'],SetterAction.MODE_SET)        
#         action.name = 'Prender luces'
        
#         d.RTCore.map_event(comp,action)
        
        
#         print "entro a light_map en control_core"
        
    def del_map_light(self,net_msg):
        print "entro a del_map_light"
        
